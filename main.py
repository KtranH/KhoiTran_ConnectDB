import mysql.connector
import pandas as pd
from tabulate import tabulate
from generate_sql_local import generate_sql_local
from document_processor import DocumentProcessor

# Th√¥ng tin k·∫øt n·ªëi MySQL
config = {
    'host': '127.0.0.1',
    'user': 'root',
    'password': '',
    'port': 3306,
    'database': 'kt_ai'
}

def get_table_schema(connection):
    """L·∫•y th√¥ng tin schema c·ªßa t·∫•t c·∫£ c√°c b·∫£ng trong database"""
    cursor = connection.cursor()
    cursor.execute("SHOW TABLES")
    tables = cursor.fetchall()
    
    schema_info = {}
    for table in tables:
        table_name = table[0]
        cursor.execute(f"DESCRIBE {table_name}")
        columns = cursor.fetchall()
        schema_info[table_name] = columns
    
    cursor.close()
    return schema_info

def print_schema_info(schema_info):
    """In th√¥ng tin schema ƒë·ªÉ ng∆∞·ªùi d√πng tham kh·∫£o"""
    print("\n=== TH√îNG TIN C·∫§U TR√öC C∆† S·ªû D·ªÆ LI·ªÜU ===")
    for table_name, columns in schema_info.items():
        print(f"\nB·∫£ng: {table_name}")
        print("-" * 60)
        print(f"{'T√™n c·ªôt':<20}{'Ki·ªÉu d·ªØ li·ªáu':<15}{'Null':<10}{'Kh√≥a':<10}{'M·∫∑c ƒë·ªãnh':<15}{'Extra':<15}")
        print("-" * 60)
        for column in columns:
            print(f"{column[0]:<20}{column[1]:<15}{column[2]:<10}{column[3]:<10}{str(column[4]):<15}{column[5]:<15}")

def execute_query(connection, sql_query):
    """Th·ª±c thi truy v·∫•n SQL v√† tr·∫£ v·ªÅ k·∫øt qu·∫£"""
    try:
        cursor = connection.cursor(dictionary=True)
        cursor.execute(sql_query)
        
        # Ki·ªÉm tra lo·∫°i truy v·∫•n
        if sql_query.strip().upper().startswith(('SELECT', 'SHOW', 'DESCRIBE')):
            results = cursor.fetchall()
            cursor.close()
            return True, results
        else:
            connection.commit()
            affected_rows = cursor.rowcount
            cursor.close()
            return True, f"Truy v·∫•n th·ª±c thi th√†nh c√¥ng. S·ªë d√≤ng b·ªã ·∫£nh h∆∞·ªüng: {affected_rows}"
    except mysql.connector.Error as err:
        return False, f"L·ªói khi th·ª±c thi truy v·∫•n: {err}"

def display_results(results, column_names=None):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ truy v·∫•n d∆∞·ªõi d·∫°ng b·∫£ng ƒë·∫πp"""
    if isinstance(results, list) and len(results) > 0:
        df = pd.DataFrame(results, columns=column_names)
        print("\n=== K·∫æT QU·∫¢ TRUY V·∫§N ===\n")
        print(tabulate(df, headers="keys", tablefmt="rounded_grid", showindex=False))
        print(f"\nüîπ T·ªïng s·ªë b·∫£n ghi: {len(results)}\n")
    elif isinstance(results, str):
        print(f"\n{results}")
    else:
        print("\n‚ö†Ô∏è Kh√¥ng c√≥ k·∫øt qu·∫£ n√†o ƒë∆∞·ª£c tr·∫£ v·ªÅ.")

def display_document_results(sql_query):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ truy v·∫•n t·ª´ t√†i li·ªáu"""
    # Ki·ªÉm tra xem c√≥ ph·∫£i l√† k·∫øt qu·∫£ t·ª´ t√†i li·ªáu kh√¥ng
    if sql_query.startswith("SELECT * FROM document_results WHERE content = '"):
        # Tr√≠ch xu·∫•t n·ªôi dung t·ª´ c√¢u truy v·∫•n gi·∫£
        content_start = sql_query.find("'") + 1
        content_end = sql_query.rfind("'")
        content = sql_query[content_start:content_end]
        
        print("\n=== K·∫æT QU·∫¢ T·ª™ T√ÄI LI·ªÜU ===\n")
        print(content)
        return True
    
    return False

def print_document_info():
    """In th√¥ng tin v·ªÅ c√°c t√†i li·ªáu c√≥ s·∫µn"""
    doc_processor = DocumentProcessor()
    doc_names = doc_processor.get_document_names()
    
    print("\n=== TH√îNG TIN T√ÄI LI·ªÜU C√ì S·∫¥N ===")
    for i, name in enumerate(doc_names, 1):
        print(f"{i}. {name}")

def main():
    try:
        # T·∫°o k·∫øt n·ªëi ƒë·∫øn MySQL
        connection = mysql.connector.connect(**config)
        
        if connection.is_connected():
            print("K·∫øt n·ªëi ƒë·∫øn MySQL th√†nh c√¥ng!")
            
            # L·∫•y th√¥ng tin schema
            schema_info = get_table_schema(connection)
            print_schema_info(schema_info)
            
            # In th√¥ng tin v·ªÅ t√†i li·ªáu c√≥ s·∫µn
            print_document_info()
            
            while True:
                print("\n" + "-"*60)
                user_question = input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n (ho·∫∑c 'exit' ƒë·ªÉ tho√°t): ")
                
                if user_question.lower() == 'exit':
                    break
                
                # T·∫°o truy v·∫•n SQL t·ª´ c√¢u h·ªèi b·∫±ng LLM
                print("\nƒêang x·ª≠ l√Ω c√¢u h·ªèi...")
                sql_query = generate_sql_local(user_question, schema_info)
                
                # Ki·ªÉm tra v√† hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ t√†i li·ªáu n·∫øu c√≥
                if display_document_results(sql_query):
                    continue
                    
                print(f"\nTruy v·∫•n SQL ƒë∆∞·ª£c t·∫°o: {sql_query}")
                
                # Th·ª±c thi truy v·∫•n
                print("\nƒêang th·ª±c thi truy v·∫•n...")
                success, results = execute_query(connection, sql_query)
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                if success:
                    display_results(results)
                else:
                    print(f"\nL·ªói: {results}")
            
            # ƒê√≥ng k·∫øt n·ªëi
            connection.close()
            print("\nƒê√£ ƒë√≥ng k·∫øt n·ªëi MySQL.")
            
    except mysql.connector.Error as err:
        print(f"L·ªói k·∫øt n·ªëi: {err}")

if __name__ == "__main__":
    main()